pragma solidity >=0.4.25 <0.7.0;


contract VickreyAuction {
    address payable seller;

    address payable public highBidder;
    uint public highBid;
    uint public secondBid;
    uint public endOfBidding;
    uint public endOfRevealing;
    uint public numBidders = 0;
    uint public numRevealed = 0;

    mapping(address => bool) public revealed;

    /**
    Constructor for the Vickrey Auction Contract

    This function sets the Bidding Periods and Revelaing periods for the auction

    @param biddingPeriod    Time after which bids won't be accepted
    @param revealingPeriod  Time after end of Bidding when bidders reveal their bids
     */
    constructor (uint biddingPeriod, uint revealingPeriod) public {
        endOfBidding = now + biddingPeriod;
        endOfRevealing = endOfBidding + revealingPeriod;
        
        seller = msg.sender;
        highBidder = seller;
        highBid = 0;
        secondBid = 0;
    }

    mapping(address => bytes32) public hashedBidOf;

    /**
    This function stores the hash of the bid submitted by the account generated by combining the ammount and a user specified key

    The function takes a bytes32 object which is a hashed value of the bid mapped to the bidder address

    @param hash Hased value of the bidding amount along with a user defined key
     */
    function bid(bytes32 hash) public {
        require(now < endOfBidding, "Bidding period is over");
        require(msg.sender != seller, "Seller not allowed to bid");
        hashedBidOf[msg.sender] = hash;
        numBidders++;
    }

    // function getNumRevealed() public view returns(uint) {
    //     return numRevealed;
    // }

    // function getSeller() public view returns(address) {
    //     return seller;
    // }
    // function getNumBidders() public view returns(uint) {
    //     return numBidders;
    // }

    // function getBid() public view returns(address, uint) {
    //     return (highBidder, secondBid);
    // }

    // function getBalance() public view returns(address, uint){
    //     return (address(this), address(this).balance);
    // }

    // function getHighest() public view returns (address) {
    //     return highBidder;
    // }

    /**
    This is a payable function only called during the reveal period in which bidders can choose to reveal their bids

    The bidder sends a request with the value as their bidding amount and the argument as the key.
    There is no penalty for bidders who don't reveal.
    At each reveal it is checked if the bid is highest or second highest and the required variable are set.
    If the bid is smaller than the highest bid, then the bid is refunded back.

    @param nonce    Random key provided by the user
     */
    function reveal(uint nonce) public payable {
        require(now >= endOfBidding && now < endOfRevealing);
        uint amount = msg.value;
        
        require(keccak256(abi.encodePacked(amount, nonce)) == hashedBidOf[msg.sender], "No data present for this seller with given amount");
        require(!revealed[msg.sender], "Bidder has already revealed the bid");
        
        revealed[msg.sender] = true;
        numRevealed++;
        
        if (numRevealed == 1){
            highBid = amount;
            highBidder = tx.origin;
        }
        else if (amount >= highBid){
            highBidder.transfer(highBid);
            secondBid = highBid;
            highBid = amount;
            highBidder = tx.origin;
        }
        else if (amount > secondBid) {
            secondBid = amount;
            tx.origin.transfer(secondBid);
        }
        else{
            tx.origin.transfer(amount);
        }
    }

    /**
    This function is called after revealing period ends by the winning bidder.
    It refunds the difference between highest and second highest bid to the second highest bidder
     */
    function claimBalance() public payable {
        require(tx.origin == highBidder, "Only highest bidder can claim");
        require(now >= endOfRevealing, "Can only be claimed after end of revealing period");
        if(numRevealed == 1){
            secondBid = highBid;
        }
        tx.origin.transfer(highBid - secondBid);
    }
}