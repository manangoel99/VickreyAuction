pragma solidity >=0.4.25 <0.7.0;

import "./VickreyAuction.sol";

contract BiddingRing {
    uint public endOfBidding;
    uint public endOfRevealing;
    uint public _biddingPeriod;
    uint public _revealingPeriod;
    uint public numBidders = 0;
    VickreyAuction public auction;
    address auctionAddress;
    /**
    Constructor for the Bidding Ring Contract

    This function sets the Bidding Periods and Revelaing periods for the bidding ring

    @param biddingPeriod    Time after which bids won't be accepted
    @param revealingPeriod Time after end of Bidding when bidders reveal their bids
     */
    constructor (uint biddingPeriod, uint revealingPeriod) public {
        endOfBidding = now + biddingPeriod;
        endOfRevealing = endOfBidding + revealingPeriod;
        // auctionAddress = _auction;
        // auction = VickreyAuction(_auction);
    }

    /**
    Link the bidding ring with the VickreyAuction

    This is setter function which sets the auction variable in the Bidding Ring to the ongoing Vickrey Auction

    @param _address Address of the Vickrey Auction contract
     */
    function setAuctionAddress(address _address) public {
        auctionAddress = _address;
        auction = VickreyAuction(_address);
    }

    /**
    This is a getter methods for testing if the auction address is set correctly

    @return Address of the VickreyAuction linked to Bidding Ring
     */
    // function getAuctionAddress() public view returns(address) {
    //     return auctionAddress;
    // }

    mapping(address => bytes32) public hashedBidOff;

    /**
    This function stores the hash of the bid submitted by the account generated by combining the ammount and a user specified key

    The function takes a bytes32 object which is a hashed value of the bid mapped to the bidder address

    @param hashed Hased value of the bidding amount along with a user defined key
     */
    function bid(bytes32 hashed) public {
        require(now < endOfBidding, "Bidding Period is over");
        hashedBidOff[msg.sender] = hashed;
        numBidders++;
    }
    
    /**
    This is a getter methods for testing if the contract balance is set correctly

    @return Balance of the bidding ring contract
     */
    // function getBalance() public view returns(uint) {
    //     return address(this).balance;
    // }

    /**
    This is a getter methods for testing if the bids are added correctly

    @return Number of bidders in the bidding ring
     */
    // function getNumBidders() public view returns(uint) {
    //     return numBidders;
    // }

    address payable public highBidder = msg.sender;
    uint public nonceBid;
    uint public highBid;

    /**
    This is a payable function only called during the reveal period in which bidders can choose to reveal their bids

    The bidder sends a request with the value as their bidding amount and the argument as the key.
    There is no penalty for bidders who don't reveal.
    At each reveal it is checked if the bid is highest and the required variable are set.
    If the bid is smaller than the highest bid, then the bid is refunded back.

    @param nonce    Random key provided by the user
     */
    function reveal(uint nonce) public payable {
        // Following line must be uncommented
        // This function should not return anything! It is just for checking
        require(now >= endOfBidding && now < endOfRevealing, "Reveal not performed during reveal period");
        require(keccak256(abi.encodePacked(uint(msg.value), nonce)) == hashedBidOff[msg.sender], "This User has not made this bid");
        if (uint(msg.value) > highBid) {
            highBidder.transfer(highBid);
            highBid = uint(msg.value);
            highBidder = msg.sender;
            nonceBid = nonce;   
        }
        else {
            msg.sender.transfer(msg.value);
        }
    }

    /**
    Getter function for testing if the highest bidder is set correctly

    @return The address of the highest bidder
     */
    // function getHighest() public view returns (address) {
    //     return highBidder;
    // }

    /**
    Function to submit highest bid to the Vickrey Auction

    This function is called only when revealing period of bidding ring is over.
    It submits the bid to the auction set by the address
     */
    function submitToAuction() public {
        require(now > endOfRevealing);
        auction.bid(keccak256(abi.encodePacked(highBid, nonceBid)));
    }
    /**
    Function to reveal highest bid to the Vickrey Auction

    This function is called only when revealing period of bidding ring is over.
    It reveals the bid to the auction set by the address
     */
    function revealToAuction() public payable {
        require(now > endOfRevealing);
        require(msg.sender == highBidder);
        auction.reveal.value(highBid)(nonceBid);
    }
}